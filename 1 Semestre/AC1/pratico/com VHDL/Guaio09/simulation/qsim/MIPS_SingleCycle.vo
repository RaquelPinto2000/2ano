// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.1.0 Build 590 10/25/2017 SJ Lite Edition"

// DATE "12/04/2019 10:45:09"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Mux2N (
	sel,
	input0,
	input1,
	muxout);
input 	sel;
input 	[4:0] input0;
input 	[4:0] input1;
output 	[4:0] muxout;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \muxout[0]~output_o ;
wire \muxout[1]~output_o ;
wire \muxout[2]~output_o ;
wire \muxout[3]~output_o ;
wire \muxout[4]~output_o ;
wire \input1[0]~input_o ;
wire \input0[0]~input_o ;
wire \sel~input_o ;
wire \muxout~0_combout ;
wire \input1[1]~input_o ;
wire \input0[1]~input_o ;
wire \muxout~1_combout ;
wire \input1[2]~input_o ;
wire \input0[2]~input_o ;
wire \muxout~2_combout ;
wire \input1[3]~input_o ;
wire \input0[3]~input_o ;
wire \muxout~3_combout ;
wire \input1[4]~input_o ;
wire \input0[4]~input_o ;
wire \muxout~4_combout ;


cycloneive_io_obuf \muxout[0]~output (
	.i(\muxout~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\muxout[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \muxout[0]~output .bus_hold = "false";
defparam \muxout[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \muxout[1]~output (
	.i(\muxout~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\muxout[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \muxout[1]~output .bus_hold = "false";
defparam \muxout[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \muxout[2]~output (
	.i(\muxout~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\muxout[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \muxout[2]~output .bus_hold = "false";
defparam \muxout[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \muxout[3]~output (
	.i(\muxout~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\muxout[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \muxout[3]~output .bus_hold = "false";
defparam \muxout[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \muxout[4]~output (
	.i(\muxout~4_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\muxout[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \muxout[4]~output .bus_hold = "false";
defparam \muxout[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \input1[0]~input (
	.i(input1[0]),
	.ibar(gnd),
	.o(\input1[0]~input_o ));
// synopsys translate_off
defparam \input1[0]~input .bus_hold = "false";
defparam \input1[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[0]~input (
	.i(input0[0]),
	.ibar(gnd),
	.o(\input0[0]~input_o ));
// synopsys translate_off
defparam \input0[0]~input .bus_hold = "false";
defparam \input0[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sel~input (
	.i(sel),
	.ibar(gnd),
	.o(\sel~input_o ));
// synopsys translate_off
defparam \sel~input .bus_hold = "false";
defparam \sel~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \muxout~0 (
// Equation(s):
// \muxout~0_combout  = (\sel~input_o  & (\input1[0]~input_o )) # (!\sel~input_o  & ((\input0[0]~input_o )))

	.dataa(\input1[0]~input_o ),
	.datab(\input0[0]~input_o ),
	.datac(gnd),
	.datad(\sel~input_o ),
	.cin(gnd),
	.combout(\muxout~0_combout ),
	.cout());
// synopsys translate_off
defparam \muxout~0 .lut_mask = 16'hAACC;
defparam \muxout~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \input1[1]~input (
	.i(input1[1]),
	.ibar(gnd),
	.o(\input1[1]~input_o ));
// synopsys translate_off
defparam \input1[1]~input .bus_hold = "false";
defparam \input1[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[1]~input (
	.i(input0[1]),
	.ibar(gnd),
	.o(\input0[1]~input_o ));
// synopsys translate_off
defparam \input0[1]~input .bus_hold = "false";
defparam \input0[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \muxout~1 (
// Equation(s):
// \muxout~1_combout  = (\sel~input_o  & (\input1[1]~input_o )) # (!\sel~input_o  & ((\input0[1]~input_o )))

	.dataa(\input1[1]~input_o ),
	.datab(\input0[1]~input_o ),
	.datac(gnd),
	.datad(\sel~input_o ),
	.cin(gnd),
	.combout(\muxout~1_combout ),
	.cout());
// synopsys translate_off
defparam \muxout~1 .lut_mask = 16'hAACC;
defparam \muxout~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \input1[2]~input (
	.i(input1[2]),
	.ibar(gnd),
	.o(\input1[2]~input_o ));
// synopsys translate_off
defparam \input1[2]~input .bus_hold = "false";
defparam \input1[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[2]~input (
	.i(input0[2]),
	.ibar(gnd),
	.o(\input0[2]~input_o ));
// synopsys translate_off
defparam \input0[2]~input .bus_hold = "false";
defparam \input0[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \muxout~2 (
// Equation(s):
// \muxout~2_combout  = (\sel~input_o  & (\input1[2]~input_o )) # (!\sel~input_o  & ((\input0[2]~input_o )))

	.dataa(\input1[2]~input_o ),
	.datab(\input0[2]~input_o ),
	.datac(gnd),
	.datad(\sel~input_o ),
	.cin(gnd),
	.combout(\muxout~2_combout ),
	.cout());
// synopsys translate_off
defparam \muxout~2 .lut_mask = 16'hAACC;
defparam \muxout~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \input1[3]~input (
	.i(input1[3]),
	.ibar(gnd),
	.o(\input1[3]~input_o ));
// synopsys translate_off
defparam \input1[3]~input .bus_hold = "false";
defparam \input1[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[3]~input (
	.i(input0[3]),
	.ibar(gnd),
	.o(\input0[3]~input_o ));
// synopsys translate_off
defparam \input0[3]~input .bus_hold = "false";
defparam \input0[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \muxout~3 (
// Equation(s):
// \muxout~3_combout  = (\sel~input_o  & (\input1[3]~input_o )) # (!\sel~input_o  & ((\input0[3]~input_o )))

	.dataa(\input1[3]~input_o ),
	.datab(\input0[3]~input_o ),
	.datac(gnd),
	.datad(\sel~input_o ),
	.cin(gnd),
	.combout(\muxout~3_combout ),
	.cout());
// synopsys translate_off
defparam \muxout~3 .lut_mask = 16'hAACC;
defparam \muxout~3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \input1[4]~input (
	.i(input1[4]),
	.ibar(gnd),
	.o(\input1[4]~input_o ));
// synopsys translate_off
defparam \input1[4]~input .bus_hold = "false";
defparam \input1[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \input0[4]~input (
	.i(input0[4]),
	.ibar(gnd),
	.o(\input0[4]~input_o ));
// synopsys translate_off
defparam \input0[4]~input .bus_hold = "false";
defparam \input0[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \muxout~4 (
// Equation(s):
// \muxout~4_combout  = (\sel~input_o  & (\input1[4]~input_o )) # (!\sel~input_o  & ((\input0[4]~input_o )))

	.dataa(\input1[4]~input_o ),
	.datab(\input0[4]~input_o ),
	.datac(gnd),
	.datad(\sel~input_o ),
	.cin(gnd),
	.combout(\muxout~4_combout ),
	.cout());
// synopsys translate_off
defparam \muxout~4 .lut_mask = 16'hAACC;
defparam \muxout~4 .sum_lutc_input = "datac";
// synopsys translate_on

assign muxout[0] = \muxout[0]~output_o ;

assign muxout[1] = \muxout[1]~output_o ;

assign muxout[2] = \muxout[2]~output_o ;

assign muxout[3] = \muxout[3]~output_o ;

assign muxout[4] = \muxout[4]~output_o ;

endmodule
